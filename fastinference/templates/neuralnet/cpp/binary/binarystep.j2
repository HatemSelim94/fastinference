{#
 # Binary Step Function
 #}

{% set bit = '1ULL' if backend.binary_word_size >= 64 else '1U' %}
// Layer {{ layer_id }}: Step
{% if output_shape|length > 2 %}
for (int h = 0; h < {{ output_shape[2] }}; h++) {
  for (int w = 0; w < {{ output_shape[3] }}; w++) {
    for (int c = 0; c < {{ output_shape[1] }}; c++) {
      if (layer_{{ layer_id - 1 }}_output[h][w][c] {% if threshold_is_high %}>={% else %}>{% endif %} {% if threshold is iterable %}layer_{{ layer_id }}_threshold[c]{% else %}{{ threshold }}{% endif %}) {
        layer_{{ layer_id }}_output[h][w][c / {{ [output_shape[1], backend.binary_word_size]|min }}] |= ({{ bit }} << ({{ backend.binary_word_size - 1}} - c % {{ [output_shape[1], backend.binary_word_size]|min }}));
      } else {
        layer_{{ layer_id }}_output[h][w][c / {{ [output_shape[1], backend.binary_word_size]|min }}] &= ~({{ bit }} << ({{ backend.binary_word_size - 1}} - c % {{ [output_shape[1], backend.binary_word_size]|min }}));
      }
    }
    {% if output_shape[1] % backend.binary_word_size != 0 %}
    for (int c = {{ output_shape[1] }}; c < {{ (output_shape[1] / backend.binary_word_size)|round(method='ceil')|int * backend.binary_word_size }}; c++) {
      layer_{{ layer_id }}_output[h][w][c / {{ [output_shape[1], backend.binary_word_size]|min }}] &= ~({{ bit }} << ({{ backend.binary_word_size - 1}} - c % {{ [output_shape[1], backend.binary_word_size]|min }}));
    }
    {% endif %}
  }
}
{% else %}
for (int d = 0; d < {{ output_shape[1] }}; d++) {
  if (layer_{{ layer_id - 1 }}_output[d] {% if threshold_is_high %}>={% else %}>{% endif %} {% if threshold is iterable %}layer_{{ layer_id }}_threshold[d]{% else %}{{ threshold }}{% endif %}) {
    layer_{{ layer_id }}_output[d / {{ [output_shape[1], backend.binary_word_size]|min }}] |= ({{ bit }} << ({{ backend.binary_word_size - 1}} - d % {{ [output_shape[1], backend.binary_word_size]|min }}));
  } else {
    layer_{{ layer_id }}_output[d / {{ [output_shape[1], backend.binary_word_size]|min }}] &= ~({{ bit }} << ({{ backend.binary_word_size - 1}} - d % {{ [output_shape[1], backend.binary_word_size]|min }}));
  }
}
{% if output_shape[1] % backend.binary_word_size != 0 %}
for (int d = {{ output_shape[1] }}; d < {{ (output_shape[1] / backend.binary_word_size)|round(method='ceil')|int * backend.binary_word_size }}; d++) {
  layer_{{ layer_id }}_output[d / {{ [output_shape[1], backend.binary_word_size]|min }}] &= ~({{ bit }} << ({{ backend.binary_word_size - 1}} - d % {{ [output_shape[1], backend.binary_word_size]|min }}));
}
{% endif %}
{% endif %}
